// Generated by https://quicktype.io

namespace Models.Database
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using System.IO;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Database
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("version")]
        public string Version { get; set; }

        [JsonProperty("entries")]
        public List<Entry> Entries { get; set; }
    }

    public partial class Entry
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("source_path")]
        public string SourcePath { get; set; }

        [JsonProperty("date")]
        public DateTimeOffset Date { get; set; }

        [JsonProperty("thumbnail")]
        public string Thumbnail { get; set; }

        [JsonProperty("codec")]
        public string Codec { get; set; }

        [JsonProperty("key")]
        public string Key { get; set; }
    }

    public partial class Database
    {
        public static Database FromJson(string json) => JsonConvert.DeserializeObject<Database>(json, Converter.Settings);

        public static Database Load(string path)
        {
            if (!File.Exists(path))
            {
                return new Database()
                {
                    Name = "Simple Video Share database",
                    Version = "0.1",
                    Entries = new List<Entry>()
                };
            }

            var db = FromJson(File.ReadAllText(path));
            db.Entries ??= new List<Entry>();
            return db;
        }

        public void Save(string path)
        {
            File.WriteAllText(path, this.ToJson());
        }
    }

    public static class Serialize
    {
        public static string ToJson(this Database self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            Formatting = Formatting.Indented,
        };
    }
}
